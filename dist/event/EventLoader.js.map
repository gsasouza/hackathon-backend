{"version":3,"sources":["../../src/event/EventLoader.ts"],"names":["Event","data","id","_id","name","description","mark","build","getLoader","DataLoader","ids","EventModel","viewerCanSee","load","context","dataloaders","EventLoader","loadEvents","args","where","search","$regex","RegExp","events","find","sort","createdAt","cursor","loader"],"mappings":";;;;;;;AAAA;;AACA;;AAKA;;;;;;;;;;IAcqBA,K,GAQnB,eAAYC,IAAZ,EAA6B;AAAA;;AAAA,OAP7BC,EAO6B;AAAA,OAN7BC,GAM6B;AAAA,OAL7BC,IAK6B;AAAA,OAJ7BC,WAI6B;AAAA,OAH7BC,IAG6B;AAAA,OAF7BC,KAE6B;AAC3B,OAAKL,EAAL,GAAUD,IAAI,CAACC,EAAf;AACA,OAAKC,GAAL,GAAWF,IAAI,CAACE,GAAhB;AACA,OAAKC,IAAL,GAAYH,IAAI,CAACG,IAAjB;AACA,OAAKC,WAAL,GAAmBJ,IAAI,CAACI,WAAxB;AACA,OAAKC,IAAL,GAAYL,IAAI,CAACK,IAAjB;AACA,OAAKC,KAAL,GAAaN,IAAI,CAACM,KAAlB;AAED,C;;;;AAII,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,SACvB,IAAIC,mBAAJ,CAAe,UAACC,GAAD;AAAA,WAAwB,2CAAeC,mBAAf,EAA2BD,GAA3B,CAAxB;AAAA,GAAf,CADuB;AAAA,CAAlB;;;;AAGP,IAAME,YAAY,GAAG,SAAfA,YAAe;AAAA,SAAM,IAAN;AAAA,CAArB;;AAEO,IAAMC,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBAAOC,OAAP,EAAmCZ,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAEXA,EAFW;AAAA;AAAA;AAAA;;AAAA,6CAGP,IAHO;;AAAA;AAAA;AAAA,mBAKGY,OAAO,CAACC,WAAR,CAAoBC,WAApB,CAAgCH,IAAhC,CAAqCX,EAArC,CALH;;AAAA;AAKVD,YAAAA,IALU;AAAA,6CAMTW,YAAY,KAAK,IAAIZ,KAAJ,CAAUC,IAAV,CAAL,GAAuB,IAN1B;;AAAA;AAAA;AAAA;AAAA,6CAQT,IARS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAJY,IAAI;AAAA;AAAA;AAAA,GAAV;;;;AAgBA,IAAMI,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOH,OAAP,EAAmCI,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBC,YAAAA,KADkB,GACVD,IAAI,CAACE,MAAL,GAAc;AAAEhB,cAAAA,IAAI,EAAE;AAAEiB,gBAAAA,MAAM,EAAE,IAAIC,MAAJ,YAAeJ,IAAI,CAACE,MAApB,GAA8B,IAA9B;AAAV;AAAR,aAAd,GAA0E,EADhE;AAElBG,YAAAA,MAFkB,GAETZ,oBAAWa,IAAX,CAAgBL,KAAhB,EAAuB;AAAEhB,cAAAA,GAAG,EAAE;AAAP,aAAvB,EAAmCsB,IAAnC,CAAwC;AAAEC,cAAAA,SAAS,EAAE,CAAC;AAAd,aAAxC,CAFS;AAAA,8CAIjB,sDAA0B;AAC/BC,cAAAA,MAAM,EAAEJ,MADuB;AAE/BT,cAAAA,OAAO,EAAPA,OAF+B;AAG/BI,cAAAA,IAAI,EAAJA,IAH+B;AAI/BU,cAAAA,MAAM,EAAEf;AAJuB,aAA1B,CAJiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVI,UAAU;AAAA;AAAA;AAAA,GAAhB","sourcesContent":["import DataLoader from 'dataloader';\nimport { connectionFromMongoCursor, mongooseLoader } from '@entria/graphql-mongoose-loader';\nimport { ConnectionArguments } from 'graphql-relay';\n\nimport { DataloaderContext } from '../types/context';\n\nimport EventModel from './EventModel';\nimport { MarkType } from '../modules/mark/MarkType';\nimport { BuildType } from '../modules/build/BuildType';\n\n\nexport type EventType = {\n  id: string,\n  _id: string,\n  name: string,\n  description: string,\n  mark: MarkType,\n  build: BuildType\n};\n\nexport default class Event {\n  id: string;\n  _id: string;\n  name: string;\n  description: string;\n  mark: MarkType;\n  build: BuildType;\n\n  constructor(data: EventType) {\n    this.id = data.id;\n    this._id = data._id;\n    this.name = data.name;\n    this.description = data.description;\n    this.mark = data.mark;\n    this.build = data.build;\n\n  }\n}\n\n\nexport const getLoader = () =>\n  new DataLoader((ids: Array<string>) => mongooseLoader(EventModel, ids));\n\nconst viewerCanSee = () => true;\n\nexport const load = async (context: DataloaderContext, id: string): Promise<EventType | null> => {\n  try {\n    if (!id) {\n      return null;\n    }\n    const data = await context.dataloaders.EventLoader.load(id);\n    return viewerCanSee() ? new Event(data) : null;\n  } catch (err) {\n    return null;\n  }\n};\n\ntype Args = {\n  search: string,\n} & ConnectionArguments;\n\nexport const loadEvents = async (context: DataloaderContext, args: Args) => {\n  const where = args.search ? { name: { $regex: new RegExp(`^${args.search}`, 'ig') } } : {};\n  const events = EventModel.find(where, { _id: 1 }).sort({ createdAt: -1 });\n\n  return connectionFromMongoCursor({\n    cursor: events,\n    context,\n    args,\n    loader: load,\n  });\n};"],"file":"EventLoader.js"}