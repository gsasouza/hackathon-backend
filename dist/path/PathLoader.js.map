{"version":3,"sources":["../../src/path/PathLoader.ts"],"names":["Path","data","id","_id","name","description","marks","getLoader","DataLoader","ids","PathModel","viewerCanSee","load","context","dataloaders","PathLoader","loadPaths","args","where","search","$regex","RegExp","paths","find","sort","createdAt","cursor","loader"],"mappings":";;;;;;;AAAA;;AACA;;AAKA;;;;;;;;;;IAWqBA,I,GAOnB,cAAYC,IAAZ,EAA4B;AAAA;;AAAA,OAN5BC,EAM4B;AAAA,OAL5BC,GAK4B;AAAA,OAJ5BC,IAI4B;AAAA,OAH5BC,WAG4B;AAAA,OAF5BC,KAE4B;AAC1B,OAAKJ,EAAL,GAAUD,IAAI,CAACC,EAAf;AACA,OAAKC,GAAL,GAAWF,IAAI,CAACE,GAAhB;AACA,OAAKC,IAAL,GAAYH,IAAI,CAACG,IAAjB;AACA,OAAKC,WAAL,GAAmBJ,IAAI,CAACI,WAAxB;AACA,OAAKC,KAAL,GAAaL,IAAI,CAACK,KAAlB;AAED,C;;;;AAII,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,SACvB,IAAIC,mBAAJ,CAAe,UAACC,GAAD;AAAA,WAAwB,2CAAeC,kBAAf,EAA0BD,GAA1B,CAAxB;AAAA,GAAf,CADuB;AAAA,CAAlB;;;;AAGP,IAAME,YAAY,GAAG,SAAfA,YAAe;AAAA,SAAM,IAAN;AAAA,CAArB;;AAEO,IAAMC,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBAAOC,OAAP,EAAmCX,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAEXA,EAFW;AAAA;AAAA;AAAA;;AAAA,6CAGP,IAHO;;AAAA;AAAA;AAAA,mBAKGW,OAAO,CAACC,WAAR,CAAoBC,UAApB,CAA+BH,IAA/B,CAAoCV,EAApC,CALH;;AAAA;AAKVD,YAAAA,IALU;AAAA,6CAMTU,YAAY,KAAK,IAAIX,IAAJ,CAASC,IAAT,CAAL,GAAsB,IANzB;;AAAA;AAAA;AAAA;AAAA,6CAQT,IARS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAJW,IAAI;AAAA;AAAA;AAAA,GAAV;;;;AAgBA,IAAMI,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOH,OAAP,EAAmCI,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,YAAAA,KADiB,GACTD,IAAI,CAACE,MAAL,GAAc;AAAEf,cAAAA,IAAI,EAAE;AAAEgB,gBAAAA,MAAM,EAAE,IAAIC,MAAJ,YAAeJ,IAAI,CAACE,MAApB,GAA8B,IAA9B;AAAV;AAAR,aAAd,GAA0E,EADjE;AAEjBG,YAAAA,KAFiB,GAETZ,mBAAUa,IAAV,CAAeL,KAAf,EAAsB;AAAEf,cAAAA,GAAG,EAAE;AAAP,aAAtB,EAAkCqB,IAAlC,CAAuC;AAAEC,cAAAA,SAAS,EAAE,CAAC;AAAd,aAAvC,CAFS;AAAA,8CAIhB,sDAA0B;AAC/BC,cAAAA,MAAM,EAAEJ,KADuB;AAE/BT,cAAAA,OAAO,EAAPA,OAF+B;AAG/BI,cAAAA,IAAI,EAAJA,IAH+B;AAI/BU,cAAAA,MAAM,EAAEf;AAJuB,aAA1B,CAJgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATI,SAAS;AAAA;AAAA;AAAA,GAAf","sourcesContent":["import DataLoader from 'dataloader';\nimport { connectionFromMongoCursor, mongooseLoader } from '@entria/graphql-mongoose-loader';\nimport { ConnectionArguments } from 'graphql-relay';\n\nimport { DataloaderContext } from '../types/context';\n\nimport PathModel from './PathModel';\nimport { MarkType } from '../mark/MarkLoader'\n\nexport type PathType = {\n  id: string,\n  _id: string,\n  name: string,\n  description: string,\n  marks: MarkType[]\n};\n\nexport default class Path {\n  id: string;\n  _id: string;\n  name: string;\n  description: string;\n  marks: MarkType[];\n\n  constructor(data: PathType) {\n    this.id = data.id;\n    this._id = data._id;\n    this.name = data.name;\n    this.description = data.description;\n    this.marks = data.marks;\n\n  }\n}\n\n\nexport const getLoader = () =>\n  new DataLoader((ids: Array<string>) => mongooseLoader(PathModel, ids));\n\nconst viewerCanSee = () => true;\n\nexport const load = async (context: DataloaderContext, id: string): Promise<PathType | null> => {\n  try {\n    if (!id) {\n      return null;\n    }\n    const data = await context.dataloaders.PathLoader.load(id);\n    return viewerCanSee() ? new Path(data) : null;\n  } catch (err) {\n    return null;\n  }\n};\n\ntype Args = {\n  search: string,\n} & ConnectionArguments;\n\nexport const loadPaths = async (context: DataloaderContext, args: Args) => {\n  const where = args.search ? { name: { $regex: new RegExp(`^${args.search}`, 'ig') } } : {};\n  const paths = PathModel.find(where, { _id: 1 }).sort({ createdAt: -1 });\n\n  return connectionFromMongoCursor({\n    cursor: paths,\n    context,\n    args,\n    loader: load,\n  });\n};"],"file":"PathLoader.js"}