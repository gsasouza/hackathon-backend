{"version":3,"sources":["../src/app.js"],"names":["app","Koa","router","Router","all","endpoint","graphqlSettingsPerReq","req","dataloaders","graphiql","schema","context","formatError","error","console","log","message","locations","stack","graphqlServer","use","routes","allowedMethods"],"mappings":";;;;;;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA;;AACA;;;;;;;;AAEA,IAAMA,GAAG,GAAG,IAAIC,YAAJ,EAAZ;AACA,IAAMC,MAAM,GAAG,IAAIC,kBAAJ,EAAf;AAEAD,MAAM,CAACE,GAAP,CACE,aADF,EAEE,gDAAc;AACZC,EAAAA,QAAQ,EAAE;AADE,CAAd,CAFF;;AAOA,IAAMC,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAEtBC,YAAAA,WAFsB,GAER,+BAFQ;AAAA,6CAIrB;AACLC,cAAAA,QAAQ,EAAE,IADL;AAELC,cAAAA,MAAM,EAANA,eAFK;AAGLC,cAAAA,OAAO,EAAE;AACPJ,gBAAAA,GAAG,EAAHA,GADO;AAEPC,gBAAAA,WAAW,EAAXA;AAFO,eAHJ;AAOLI,cAAAA,WAAW,EAAE,qBAAAC,KAAK,EAAI;AACpBC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACAF,gBAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACI,SAAlB;AACAH,gBAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACK,KAAlB;AAEA,uBAAO;AACLF,kBAAAA,OAAO,EAAEH,KAAK,CAACG,OADV;AAELC,kBAAAA,SAAS,EAAEJ,KAAK,CAACI,SAFZ;AAGLC,kBAAAA,KAAK,EAAEL,KAAK,CAACK;AAHR,iBAAP;AAKD;AAjBI,aAJqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAArBZ,qBAAqB;AAAA;AAAA;AAAA,GAA3B;;AAyBA,IAAMa,aAAa,GAAG,yBAAQ,yBAAYb,qBAAZ,CAAR,CAAtB,C,CAEA;;AACAJ,MAAM,CAACE,GAAP,CAAW,UAAX,EAAuBe,aAAvB;AAEAnB,GAAG,CAACoB,GAAJ,CAAQ,qBAAR;AACApB,GAAG,CAACoB,GAAJ,CAAQlB,MAAM,CAACmB,MAAP,EAAR,EAAyBD,GAAzB,CAA6BlB,MAAM,CAACoB,cAAP,EAA7B;eAEetB,G","sourcesContent":["\n// import 'isomorphic-fetch';\n\nimport Koa from 'koa';\nimport bodyParser from 'koa-bodyparser';\nimport convert from 'koa-convert';\nimport cors from 'kcors';\nimport graphqlHttp from 'koa-graphql';\nimport Router from 'koa-router';\nimport { koaPlayground } from 'graphql-playground-middleware';\n\n\nimport schema from './schema';\nimport registerLoaders from './registerLoaders';\n\nconst app = new Koa();\nconst router = new Router();\n\nrouter.all(\n  '/playground',\n  koaPlayground({\n    endpoint: '/graphql',\n  }),\n);\n\nconst graphqlSettingsPerReq = async req => {\n\n  const dataloaders = registerLoaders();\n\n  return {\n    graphiql: true,\n    schema,\n    context: {\n      req,\n      dataloaders,\n    },\n    formatError: error => {\n      console.log(error.message);\n      console.log(error.locations);\n      console.log(error.stack);\n\n      return {\n        message: error.message,\n        locations: error.locations,\n        stack: error.stack,\n      };\n    },\n  };\n};\n\nconst graphqlServer = convert(graphqlHttp(graphqlSettingsPerReq));\n\n// graphql standard route\nrouter.all('/graphql', graphqlServer);\n\napp.use(cors());\napp.use(router.routes()).use(router.allowedMethods());\n\nexport default app;\n"],"file":"app.js"}