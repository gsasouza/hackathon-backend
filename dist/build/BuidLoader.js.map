{"version":3,"sources":["../../src/build/BuidLoader.ts"],"names":["Build","data","id","_id","name","description","mark","getLoader","DataLoader","ids","BuildModel","viewerCanSee","load","context","dataloaders","BuildLoader","loadBuilds","args","where","search","$regex","RegExp","find","sort","createdAt","builds","console","log"],"mappings":";;;;;;;AAAA;;AACA;;AAKA;;;;;;;;;;IAaqBA,K,GAOnB,eAAYC,IAAZ,EAA6B;AAAA;;AAAA,OAN7BC,EAM6B;AAAA,OAL7BC,GAK6B;AAAA,OAJ7BC,IAI6B;AAAA,OAH7BC,WAG6B;AAAA,OAF7BC,IAE6B;AAC3B,OAAKJ,EAAL,GAAUD,IAAI,CAACC,EAAf;AACA,OAAKC,GAAL,GAAWF,IAAI,CAACE,GAAhB;AACA,OAAKC,IAAL,GAAYH,IAAI,CAACG,IAAjB;AACA,OAAKC,WAAL,GAAmBJ,IAAI,CAACI,WAAxB;AACA,OAAKC,IAAL,GAAYL,IAAI,CAACK,IAAjB;AAED,C;;;;AAII,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,SACvB,IAAIC,mBAAJ,CAAe,UAACC,GAAD;AAAA,WAAwB,2CAAeC,mBAAf,EAA2BD,GAA3B,CAAxB;AAAA,GAAf,CADuB;AAAA,CAAlB;;;;AAGP,IAAME,YAAY,GAAG,SAAfA,YAAe;AAAA,SAAM,IAAN;AAAA,CAArB;;AAEO,IAAMC,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBAAOC,OAAP,EAAmCX,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAEXA,EAFW;AAAA;AAAA;AAAA;;AAAA,6CAGP,IAHO;;AAAA;AAAA;AAAA,mBAKGW,OAAO,CAACC,WAAR,CAAoBC,WAApB,CAAgCH,IAAhC,CAAqCV,EAArC,CALH;;AAAA;AAKVD,YAAAA,IALU;AAAA,6CAMTU,YAAY,KAAK,IAAIX,KAAJ,CAAUC,IAAV,CAAL,GAAuB,IAN1B;;AAAA;AAAA;AAAA;AAAA,6CAQT,IARS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAJW,IAAI;AAAA;AAAA;AAAA,GAAV;;;;AAgBA,IAAMI,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOH,OAAP,EAAmCI,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBC,YAAAA,KADkB,GACVD,IAAI,CAACE,MAAL,GAAc;AAAEf,cAAAA,IAAI,EAAE;AAAEgB,gBAAAA,MAAM,EAAE,IAAIC,MAAJ,YAAeJ,IAAI,CAACE,MAApB,GAA8B,IAA9B;AAAV;AAAR,aAAd,GAA0E,EADhE;AAAA;AAAA,mBAEHT,oBAAWY,IAAX,CAAgBJ,KAAhB,EAAuBK,IAAvB,CAA4B;AAAEC,cAAAA,SAAS,EAAE,CAAC;AAAd,aAA5B,CAFG;;AAAA;AAElBC,YAAAA,MAFkB;AAGxBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAHwB,8CAIjBA,MAJiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVT,UAAU;AAAA;AAAA;AAAA,GAAhB","sourcesContent":["import DataLoader from 'dataloader';\nimport { connectionFromMongoCursor, mongooseLoader } from '@entria/graphql-mongoose-loader';\nimport { ConnectionArguments } from 'graphql-relay';\n\nimport { DataloaderContext } from '../types/context';\n\nimport BuildModel from './BuildModel';\nimport { MarkType } from '../mark/MarkLoader';\n\n\n\nexport type BuildType = {\n  id: string,\n  _id: string,\n  name: string,\n  description: string,\n  mark: MarkType,\n};\n\nexport default class Build {\n  id: string;\n  _id: string;\n  name: string;\n  description: string;\n  mark: MarkType;\n\n  constructor(data: BuildType) {\n    this.id = data.id;\n    this._id = data._id;\n    this.name = data.name;\n    this.description = data.description;\n    this.mark = data.mark;\n\n  }\n}\n\n\nexport const getLoader = () =>\n  new DataLoader((ids: Array<string>) => mongooseLoader(BuildModel, ids));\n\nconst viewerCanSee = () => true;\n\nexport const load = async (context: DataloaderContext, id: string): Promise<BuildType | null> => {\n  try {\n    if (!id) {\n      return null;\n    }\n    const data = await context.dataloaders.BuildLoader.load(id);\n    return viewerCanSee() ? new Build(data) : null;\n  } catch (err) {\n    return null;\n  }\n};\n\ntype Args = {\n  search: string,\n} & ConnectionArguments;\n\nexport const loadBuilds = async (context: DataloaderContext, args: Args) => {\n  const where = args.search ? { name: { $regex: new RegExp(`^${args.search}`, 'ig') } } : {};\n  const builds = await BuildModel.find(where).sort({ createdAt: -1 });\n  console.log(builds)\n  return builds;\n};\n"],"file":"BuidLoader.js"}