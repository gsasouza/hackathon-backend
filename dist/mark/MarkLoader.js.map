{"version":3,"sources":["../../src/mark/MarkLoader.ts"],"names":["Mark","data","id","_id","latitude","longitude","type","getLoader","DataLoader","ids","MarkModel","viewerCanSee","load","context","dataloaders","MarkLoader","loadMarks","args","where","search","name","$regex","RegExp","find","sort","createdAt"],"mappings":";;;;;;;AAAA;;AACA;;AAKA;;;;;;;;;;IAUqBA,I,GAOnB,cAAYC,IAAZ,EAA4B;AAAA;;AAAA,OAN5BC,EAM4B;AAAA,OAL5BC,GAK4B;AAAA,OAJ5BC,QAI4B;AAAA,OAH5BC,SAG4B;AAAA,OAF5BC,IAE4B;AAC1B,OAAKJ,EAAL,GAAUD,IAAI,CAACC,EAAf;AACA,OAAKC,GAAL,GAAWF,IAAI,CAACE,GAAhB;AACA,OAAKC,QAAL,GAAgBH,IAAI,CAACG,QAArB;AACA,OAAKC,SAAL,GAAiBJ,IAAI,CAACI,SAAtB;AACA,OAAKC,IAAL,GAAYL,IAAI,CAACK,IAAjB;AAED,C;;;;AAGI,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,SACvB,IAAIC,mBAAJ,CAAe,UAACC,GAAD;AAAA,WAAwB,2CAAeC,kBAAf,EAA0BD,GAA1B,CAAxB;AAAA,GAAf,CADuB;AAAA,CAAlB;;;;AAGP,IAAME,YAAY,GAAG,SAAfA,YAAe;AAAA,SAAM,IAAN;AAAA,CAArB;;AAEO,IAAMC,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBAAOC,OAAP,EAAmCX,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAEXA,EAFW;AAAA;AAAA;AAAA;;AAAA,6CAGP,IAHO;;AAAA;AAAA;AAAA,mBAKGW,OAAO,CAACC,WAAR,CAAoBC,UAApB,CAA+BH,IAA/B,CAAoCV,EAApC,CALH;;AAAA;AAKVD,YAAAA,IALU;AAAA,6CAMTU,YAAY,KAAK,IAAIX,IAAJ,CAASC,IAAT,CAAL,GAAsB,IANzB;;AAAA;AAAA;AAAA;AAAA,6CAQT,IARS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAJW,IAAI;AAAA;AAAA;AAAA,GAAV;;;;AAgBA,IAAMI,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOH,OAAP,EAAmCI,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,YAAAA,KADiB,GACTD,IAAI,CAACE,MAAL,GAAc;AAAEC,cAAAA,IAAI,EAAE;AAAEC,gBAAAA,MAAM,EAAE,IAAIC,MAAJ,YAAeL,IAAI,CAACE,MAApB,GAA8B,IAA9B;AAAV;AAAR,aAAd,GAA0E,EADjE;AAAA,8CAEhBT,mBAAUa,IAAV,CAAeL,KAAf,EAAsBM,IAAtB,CAA2B;AAAEC,cAAAA,SAAS,EAAE,CAAC;AAAd,aAA3B,CAFgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATT,SAAS;AAAA;AAAA;AAAA,GAAf","sourcesContent":["import DataLoader from 'dataloader';\nimport { connectionFromMongoCursor, mongooseLoader } from '@entria/graphql-mongoose-loader';\nimport { ConnectionArguments } from 'graphql-relay';\n\nimport { DataloaderContext } from '../types/context';\n\nimport MarkModel from './MarkModel';\n\nexport type MarkType = {\n  id: string,\n  _id: string,\n  latitude: string,\n  longitude: string,\n  type: string\n};\n\nexport default class Mark {\n  id: string;\n  _id: string;\n  latitude: string;\n  longitude: string;\n  type: string;\n\n  constructor(data: MarkType) {\n    this.id = data.id;\n    this._id = data._id;\n    this.latitude = data.latitude;\n    this.longitude = data.longitude;\n    this.type = data.type;\n\n  }\n}\n\nexport const getLoader = () =>\n  new DataLoader((ids: Array<string>) => mongooseLoader(MarkModel, ids));\n\nconst viewerCanSee = () => true;\n\nexport const load = async (context: DataloaderContext, id: string): Promise<MarkType | null> => {\n  try {\n    if (!id) {\n      return null;\n    }\n    const data = await context.dataloaders.MarkLoader.load(id);\n    return viewerCanSee() ? new Mark(data) : null;\n  } catch (err) {\n    return null;\n  }\n};\n\ntype Args = {\n  search: string,\n} & ConnectionArguments;\n\nexport const loadMarks = async (context: DataloaderContext, args: Args) => {\n  const where = args.search ? { name: { $regex: new RegExp(`^${args.search}`, 'ig') } } : {};\n  return MarkModel.find(where).sort({ createdAt: -1 });\n};\n"],"file":"MarkLoader.js"}